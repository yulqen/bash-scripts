#!/bin/bash

# Search ~/Notes/journal for a term and return as a markdown list sorted by date.

# Automatic cleanup
trap 'rm -f "$tmpfile"' EXIT
tmpfile=$(mktemp) || exit 1

termsize=$(stty size| awk '{print $2}')
printf "=%.0s" $(seq $termsize)
echo ""

# very bad way to check the params passed in...
[[ -z "$2" ]] && [[ -n "$1" ]] && searchterm="$1"
[[ -n "$2" ]] && [[ -n "$1" ]] && searchterm="$1" && flag="$2"

# some confirmatory echoing
echo "Search term: $searchterm"
[[ -v flag ]] && echo "Flag: $flag"

if [[ $flag != "-i" ]]; then
    flag=""
fi

# do the business, starting with using grep to get the pertinent lines
echo -e "$(grep -R $flag "$searchterm" /home/"$USER"/Notes/journal/)" > "$tmpfile"

# more confirmatory text
echo "Command: 'grep -R $flag $searchterm /home/"$USER"/Notes/journal/'"
printf "=%.0s" $(seq $termsize)
echo ""

# subsitute to get the right format using sed
# form: 2022-01-10 12:49: :TODO Do the MyHR content: ht
re='^/home/lemon/Notes/journal/([0-9]{4})-([0-9]{2})-([0-9]{2})\.md:-\s([0-9]{2}:[0-9]{2}):\s(.*)'
while IFS=  read -r line; do
    if [[ $line =~ $re ]]; then
        year=${BASH_REMATCH[1]}
        echo "$year"
        month=${BASH_REMATCH[2]}
        echo "$month"
        day=${BASH_REMATCH[3]}
        echo "$day"
        time=${BASH_REMATCH[4]}
        echo "$time"
        note=${BASH_REMATCH[5]}
        echo "$note"
    fi
done < "$tmpfile"
#sed -r -i 's/\/home\/lemon\/Notes\/journal\/([[:digit:]]*-[[:digit:]]*-[[:digit:]]*)\.md:-[[:blank:]](.*)/\1 \2/' "$tmpfile"

# output
# cat "$tmpfile" | sort

